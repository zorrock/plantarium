// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../@plantarium/types
//   ../../../../ogl-typescript

declare module 'geometry' {
    export * from 'geometry/helpers';
    export * from 'geometry/parts';
    export * from 'geometry/shapes';
    export * from 'geometry/modifiers';
}

declare module 'geometry/helpers' {
    export { default as calculateNormals } from 'geometry/helpers/calculateNormals';
    export { default as convertInstancedGeometry } from 'geometry/helpers/convertInstancedGeometry';
    export { default as curveToArray } from 'geometry/helpers/curveToArray';
    export { default as extrudePath } from 'geometry/helpers/extrudePath';
    export { default as flatten } from 'geometry/helpers/flatten';
    export { default as interpolateArray } from 'geometry/helpers/interpolateArray';
    export { default as interpolateSkeleton } from 'geometry/helpers/interpolateSkeleton';
    export { default as interpolateSkeletonVec } from 'geometry/helpers/interpolateSkeletonVec';
    export { default as join } from 'geometry/helpers/join';
    export { default as length2D } from 'geometry/helpers/length2D';
    export { default as length3D } from 'geometry/helpers/length3D';
    export { default as lerp } from 'geometry/helpers/lerp';
    export { default as noise } from 'geometry/helpers/noise';
    export { default as normalize2D } from 'geometry/helpers/normalize2D';
    export { default as normalize3D } from 'geometry/helpers/normalize3D';
    export { default as rotate2D } from 'geometry/helpers/rotate2D';
    export { default as rotate3D } from 'geometry/helpers/rotate3D';
    export { default as rotateMesh3D } from 'geometry/helpers/rotateMesh3D';
    export { default as transferToGeometry } from 'geometry/helpers/transferToGeometry';
    export { default as translateMesh } from 'geometry/helpers/translateMesh';
    export * from "geometry/helpers/findOrthVec";
}

declare module 'geometry/parts' {
    export { default as grid } from 'geometry/parts/grid';
    export { default as ground } from 'geometry/parts/ground';
    export { default as leaf } from 'geometry/parts/leaf';
}

declare module 'geometry/shapes' {
    export { default as box } from 'geometry/shapes/box';
    export { default as circle } from 'geometry/shapes/circle';
    export { default as ring } from 'geometry/shapes/ring';
    export { default as triangle } from 'geometry/shapes/triangle';
    export { default as tube } from 'geometry/shapes/tube';
    export { default as tube_old } from 'geometry/shapes/tube_old';
}

declare module 'geometry/modifiers' {
    export * from "geometry/modifiers/noiseSkeleton";
    export * from "geometry/modifiers/splitSkeleton";
    export * from "geometry/modifiers/translateSkeleton";
    export * from "geometry/modifiers/rotateSkeleton";
}

declare module 'geometry/helpers/calculateNormals' {
    import type { TransferGeometry } from "@plantarium/types";
    export default function (geometry: TransferGeometry): TransferGeometry;
}

declare module 'geometry/helpers/convertInstancedGeometry' {
    import type { InstancedGeometry, TransferGeometry } from "@plantarium/types";
    export default function (instances: InstancedGeometry): TransferGeometry[];
}

declare module 'geometry/helpers/curveToArray' {
    import type { Vec2 } from '@plantarium/types';
    export default function (points: Vec2[]): number[];
}

declare module 'geometry/helpers/extrudePath' {
    export default function (_path: [number, number, number, number][], resolution?: number): {
        position: any[];
        normals: any[];
        index: Uint16Array;
    };
}

declare module 'geometry/helpers/flatten' {
    import type { TransferGeometry } from "@plantarium/types";
    export default function (mesh: TransferGeometry): TransferGeometry;
}

declare module 'geometry/helpers/interpolateArray' {
    function interpolateArray(array: number[], alpha?: number): number;
    export default interpolateArray;
}

declare module 'geometry/helpers/interpolateSkeleton' {
    export default function (skeleton: Float32Array, alpha: number): [number, number, number, number];
}

declare module 'geometry/helpers/interpolateSkeletonVec' {
    export default function (skeleton: Float32Array, alpha: number): [number, number, number, number];
}

declare module 'geometry/helpers/join' {
    import type { TransferGeometry } from "@plantarium/types";
    export default function (..._geometries: TransferGeometry[]): TransferGeometry;
}

declare module 'geometry/helpers/length2D' {
    const _default: (x: number, y: number) => number;
    export default _default;
}

declare module 'geometry/helpers/length3D' {
    const _default: (x: number, y: number, z: number) => number;
    export default _default;
}

declare module 'geometry/helpers/lerp' {
    export default function lerp(v0: number, v1: number, t: number): number;
}

declare module 'geometry/helpers/noise' {
    const _default: {
        n1d: (x: number) => number;
        n2d: (x: number, y: number) => number;
        n3d: (x: number, y: number, z: number) => number;
        seed: number;
    };
    export default _default;
}

declare module 'geometry/helpers/normalize2D' {
    const _default: ([x, y]: number[]) => number[];
    export default _default;
}

declare module 'geometry/helpers/normalize3D' {
    const _default: ([x, y, z]: number[]) => [number, number, number];
    export default _default;
}

declare module 'geometry/helpers/rotate2D' {
    const _default: (x: number, y: number, degrees: number) => number[];
    export default _default;
}

declare module 'geometry/helpers/rotate3D' {
    import { Vec3 } from 'ogl-typescript';
    export default function rotate3D(point: number[] | Vec3, rawAxis: number[] | Vec3, theta: number): Vec3;
}

declare module 'geometry/helpers/rotateMesh3D' {
    import type { TransferGeometry } from '@plantarium/types';
    import type { Vec3 } from 'ogl-typescript';
    export default function (geo: TransferGeometry, rawAxis: number[] | Vec3, theta: number): TransferGeometry;
}

declare module 'geometry/helpers/transferToGeometry' {
    import type { TransferGeometry } from '@plantarium/types';
    import { Geometry, OGLRenderingContext } from 'ogl-typescript';
    export default function (gl: OGLRenderingContext, transfer: TransferGeometry): Geometry;
}

declare module 'geometry/helpers/translateMesh' {
    import type { TransferGeometry } from '@plantarium/types';
    import type { Vec3 } from 'ogl-typescript';
    export default function (mesh: TransferGeometry, offset: Vec3): TransferGeometry;
}

declare module 'geometry/helpers/findOrthVec' {
    export function findOrthogonalVector([x, y, z]: number[]): number[];
}

declare module 'geometry/parts/grid' {
    import type { TransferGeometry } from "@plantarium/types";
    export default function (size?: number, res?: number): TransferGeometry;
}

declare module 'geometry/parts/ground' {
    import type { TransferGeometry } from "@plantarium/types";
    export default function (size?: number, res?: number, resCircle?: number): TransferGeometry;
}

declare module 'geometry/parts/leaf' {
    import type { TransferGeometry, Vec2 } from "@plantarium/types";
    export default function (shape: Vec2[], { res, xCurvature, yCurvature }?: {
        res?: number;
        xCurvature?: number;
        yCurvature?: number;
    }): TransferGeometry;
}

declare module 'geometry/shapes/box' {
    import type { TransferGeometry } from "@plantarium/types";
    const _default: (s: number) => TransferGeometry;
    export default _default;
}

declare module 'geometry/shapes/circle' {
    import type { Vec3 } from 'ogl-typescript';
    export default function (origin?: Vec3 | [number, number, number], radius?: number, resolution?: number): {
        position: Float32Array;
        normal: Float32Array;
        uv: Float32Array;
        index: Uint16Array;
    };
}

declare module 'geometry/shapes/ring' {
    import { Vec3 } from 'ogl-typescript';
    export default function (origin: Vec3, axis: Vec3, radius: number, resolution?: number, testVec?: Vec3): Float32Array;
}

declare module 'geometry/shapes/triangle' {
    import { Vec3 } from 'ogl-typescript';
    export default function (origin?: Vec3, size?: number): {
        position: Float32Array;
        normal: Float32Array;
        uv: Float32Array;
        index: Uint16Array;
    };
}

declare module 'geometry/shapes/tube' {
    import type { TransferGeometry } from '@plantarium/types';
    export default function (skeleton: Float32Array, resX?: number): TransferGeometry;
}

declare module 'geometry/shapes/tube_old' {
    export default function tube(skeleton: Float32Array, resX: number): {
        position: Float32Array;
        normal: Float32Array;
        uv: Float32Array;
        index: Uint16Array | Uint32Array;
    };
}

declare module 'geometry/modifiers/noiseSkeleton' {
    export function noiseSkeleton(skeleton: Float32Array, strength?: number, scale?: [number, number, number] | number, offset?: [number, number, number] | number, fixateBottom?: boolean): Float32Array;
}

declare module 'geometry/modifiers/splitSkeleton' {
    export function splitSkeleton(skeleton: Float32Array, distance?: number, amount?: number, angle?: number): Float32Array[];
}

declare module 'geometry/modifiers/translateSkeleton' {
    export function translateSkeleton(skeleton: Float32Array, [ox, oy, oz]: [number, number, number]): Float32Array;
}

declare module 'geometry/modifiers/rotateSkeleton' {
    export function rotateSkeleton(skeleton: Float32Array, axis: [number, number, number], angle?: number, origin?: [number, number, number], lerp?: boolean): Float32Array;
}

