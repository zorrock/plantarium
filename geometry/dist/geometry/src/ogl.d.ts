import * as ogl from "ogl-typescript";
declare const _default: {
    Geometry: typeof ogl.Geometry;
    Program: typeof ogl.Program;
    Renderer: typeof ogl.Renderer;
    Camera: typeof ogl.Camera;
    Transform: typeof ogl.Transform;
    Mesh: typeof ogl.Mesh;
    Texture: typeof ogl.Texture;
    RenderTarget: typeof ogl.RenderTarget;
    Color: typeof ogl.Color;
    Euler: typeof ogl.Euler;
    Mat3: typeof ogl.Mat3;
    Mat4: typeof ogl.Mat4;
    Quat: typeof ogl.Quat;
    Vec2: typeof ogl.Vec2;
    Vec3: typeof ogl.Vec3;
    Vec4: typeof ogl.Vec4;
    Plane: typeof ogl.Plane;
    Box: typeof ogl.Box;
    Sphere: typeof ogl.Sphere;
    Cylinder: typeof ogl.Cylinder;
    Triangle: typeof ogl.Triangle;
    Torus: typeof ogl.Torus;
    Orbit(object: ogl.Transform & {
        fov: number;
    }, { element, enabled, target, ease, inertia, enableRotate, rotateSpeed, autoRotate, autoRotateSpeed, enableZoom, zoomSpeed, enablePan, panSpeed, minPolarAngle, maxPolarAngle, minAzimuthAngle, maxAzimuthAngle, minDistance, maxDistance, }?: Partial<ogl.OrbitOptions>): void;
    Raycast: typeof ogl.Raycast;
    Curve: typeof ogl.Curve;
    Post: typeof ogl.Post;
    Skin: typeof ogl.Skin;
    Animation: typeof ogl.Animation;
    Text({ font, text, width, align, size, letterSpacing, lineHeight, wordSpacing, wordBreak, }: {
        font: any;
        text: any;
        width?: number;
        align?: string;
        size?: number;
        letterSpacing?: number;
        lineHeight?: number;
        wordSpacing?: number;
        wordBreak?: boolean;
    }): void;
    NormalProgram(gl: any): ogl.Program;
    Flowmap: typeof ogl.Flowmap;
    GPGPU: typeof ogl.GPGPU;
    Polyline: typeof ogl.Polyline;
    Shadow: typeof ogl.Shadow;
    KTXTexture: typeof ogl.KTXTexture;
    TextureLoader: typeof ogl.TextureLoader;
    GLTFLoader: typeof ogl.GLTFLoader;
    GLTFAnimation: typeof ogl.GLTFAnimation;
    GLTFSkin: typeof ogl.GLTFSkin;
};
export default _default;
